// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QualityBills.API.DbContexts;

#nullable disable

namespace QualityBills.API.Migrations
{
    [DbContext(typeof(QualityBillsContext))]
    [Migration("20220707173155_initDb")]
    partial class initDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.6");

            modelBuilder.Entity("QualityBills.API.Customers.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address2")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BankAccountOwner")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BankBic")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BankIban")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Organization")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VatId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("QualityBills.API.Employees.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("Birthdate")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("GivenName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("PreferredUsername")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            EmployeeId = 1,
                            Birthdate = new DateOnly(2022, 6, 7),
                            Email = "test@email.de",
                            FamilyName = "familyName",
                            GivenName = "givenName",
                            PasswordHash = new byte[] { 81, 73, 82, 204, 197, 33, 170, 121, 15, 76, 192, 145, 208, 187, 221, 14, 1, 50, 152, 33, 115, 103, 237, 1, 201, 118, 100, 26, 19, 79, 82, 77, 223, 162, 49, 115, 123, 61, 10, 100, 32, 232, 132, 61, 32, 134, 228, 205, 144, 185, 184, 68, 227, 183, 193, 247, 85, 27, 48, 53, 43, 162, 146, 114 },
                            PasswordSalt = new byte[] { 27, 248, 49, 177, 39, 231, 218, 0, 162, 1, 154, 92, 252, 15, 213, 116, 56, 57, 85, 1, 190, 19, 186, 120, 202, 181, 252, 170, 78, 214, 255, 92, 21, 48, 164, 50, 124, 96, 83, 241, 41, 195, 131, 213, 151, 128, 123, 112, 71, 102, 250, 108, 241, 33, 54, 233, 54, 242, 240, 42, 174, 244, 54, 125, 61, 117, 122, 114, 76, 20, 31, 102, 161, 194, 84, 181, 219, 106, 74, 255, 167, 94, 229, 98, 215, 245, 144, 233, 148, 235, 2, 83, 34, 161, 230, 102, 234, 149, 141, 206, 133, 176, 161, 8, 119, 15, 101, 148, 191, 152, 76, 15, 200, 108, 234, 51, 14, 179, 143, 190, 67, 222, 40, 75, 127, 196, 192, 46 },
                            PreferredUsername = "username"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
